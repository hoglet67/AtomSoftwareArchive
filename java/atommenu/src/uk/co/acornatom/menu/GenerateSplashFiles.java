package uk.co.acornatom.menu;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.imageio.ImageIO;

public class GenerateSplashFiles extends GenerateBase {
	
	private static final String SPASH_TEMPLATE = "splash" + File.separator + "newsplash.bmp";

	/* 6847 Font taken from Atomulator */

	int fontdata[] = { 0x00, 0x00, 0x00, 0x1c, 0x22, 0x02, 0x1a, 0x2a, 0x2a,
			0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x14, 0x22, 0x22, 0x3e,
			0x22, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x12, 0x12, 0x1c,
			0x12, 0x12, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x22, 0x20,
			0x20, 0x20, 0x22, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x12,
			0x12, 0x12, 0x12, 0x12, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e,
			0x20, 0x20, 0x3c, 0x20, 0x20, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x3e, 0x20, 0x20, 0x3c, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x1e, 0x20, 0x20, 0x26, 0x22, 0x22, 0x1e, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x22, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x22, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x1c, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x02, 0x22, 0x22, 0x1c,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x24, 0x28, 0x30, 0x28, 0x24,
			0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20,
			0x20, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x36, 0x2a, 0x2a,
			0x22, 0x22, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x32, 0x2a,
			0x26, 0x22, 0x22, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x22,
			0x22, 0x22, 0x22, 0x22, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c,
			0x22, 0x22, 0x3c, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x1c, 0x22, 0x22, 0x22, 0x2a, 0x24, 0x1a, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x3c, 0x22, 0x22, 0x3c, 0x28, 0x24, 0x22, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x1c, 0x22, 0x10, 0x08, 0x04, 0x22, 0x1c, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x3e, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x22, 0x22, 0x14, 0x14, 0x08,
			0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x22, 0x22, 0x2a, 0x2a,
			0x36, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x22, 0x14, 0x08,
			0x14, 0x22, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x22, 0x14,
			0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x02,
			0x04, 0x08, 0x10, 0x20, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38,
			0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x20, 0x20, 0x10, 0x08, 0x04, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x0e, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0e, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x08, 0x1c, 0x2a, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x08, 0x10, 0x3e, 0x10, 0x08, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00,
			0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x14, 0x14, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x14, 0x36, 0x00,
			0x36, 0x14, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x1e, 0x20,
			0x1c, 0x02, 0x3c, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x32,
			0x04, 0x08, 0x10, 0x26, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10,
			0x28, 0x28, 0x10, 0x2a, 0x24, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x08, 0x10, 0x20, 0x20, 0x20, 0x10, 0x08, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x08, 0x04, 0x02, 0x02, 0x02, 0x04, 0x08, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x08, 0x1c, 0x3e, 0x1c, 0x08, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x3e, 0x08, 0x08, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x10,
			0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x04,
			0x08, 0x10, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x24,
			0x24, 0x24, 0x24, 0x24, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,
			0x18, 0x08, 0x08, 0x08, 0x08, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x1c, 0x22, 0x02, 0x1c, 0x20, 0x20, 0x3e, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x1c, 0x22, 0x02, 0x0c, 0x02, 0x22, 0x1c, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x04, 0x0c, 0x14, 0x3e, 0x04, 0x04, 0x04, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x3e, 0x20, 0x3c, 0x02, 0x02, 0x22, 0x1c, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x1c, 0x20, 0x20, 0x3c, 0x22, 0x22, 0x1c,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x02, 0x04, 0x08, 0x10, 0x20,
			0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x22, 0x22, 0x1c, 0x22,
			0x22, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x22, 0x22, 0x1e,
			0x02, 0x02, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18,
			0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18,
			0x00, 0x18, 0x18, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
			0x08, 0x10, 0x20, 0x10, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x3e, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x10, 0x08, 0x04, 0x02, 0x04, 0x08, 0x10, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x18, 0x24, 0x04, 0x08, 0x08, 0x00, 0x08, 0x00, 0x00, };

	private String version;
	private Map<String, Integer> chunks;
	private File menuDir;
	
	public GenerateSplashFiles(File menuDir, String version, Map<String, Integer> chunks) {
		this.menuDir = menuDir;
		this.version = version;
		this.chunks = chunks;
	}

	private void writeAtomString(byte[] screen, String s, int x, int y, boolean inverse) {
		int a = y * 32 + x;
		for (int i = 0; i < s.length(); i++) {
			int c = s.charAt(i);
			if (c > 64) {
				c = c - 64;
			}
			c = c & 63;
			for (int j = 0; j < 12; j++) {
				int b = fontdata[c * 12 + j];
				if (inverse) {
					b = b ^ 255;
				}
				screen[a + i + j * 32] = (byte) b;
			}
		}
	}
	public void generateFiles(List<SpreadsheetTitle> items) throws IOException {

		// Create an grey image
		byte[] screen = new byte[0x1800];
		fill(screen, 0, 0, 256, 192, 0);

		// Start with the template
		readSplashTemplate(SPASH_TEMPLATE, screen);

		// Overlay the menu items
		int y = 60;
		for (Map.Entry<String, Integer> chunk : chunks.entrySet()) {
			String line = chunk.getKey();
			String count = "(" + chunk.getValue() + ")";
			while (line.length() < 30 - count.length()) {
				line += " ";
			}
			line += count;
			writeAtomString(screen, line, 1, y, true);
			y += 12;
		}		

		// Overlay the status line
		SimpleDateFormat sdf = new SimpleDateFormat("dd/MMM/yyyy");
		String date = sdf.format(new Date()).toUpperCase();
		String line = "RELEASE " + version.toUpperCase();
		while (line.length() < 19) {
			line += " ";
		}
		line += date;
		if (line.length() != 30) {
			throw new RuntimeException("Expected footer to be 30 chars long: >>>" + line + "<<<");
		}
		y = 192 - 20;
		writeAtomString(screen, line, 1, y, true);

		// Save the file
		String name = "SPLASH";
		FileOutputStream fosSplash = new FileOutputStream(new File(menuDir, name));
		writeATMFile(fosSplash, name, 0x8000, 0x8000, screen);
		fosSplash.close();
		
		// Save the file as a PNG
		int s = 3;
		int b = 32;
		BufferedImage save = new BufferedImage(s * (256 + b + b), s * (192 + b + b), BufferedImage.TYPE_INT_ARGB);
		Graphics2D g2 = (Graphics2D)save.createGraphics();
		g2.setColor(Color.GREEN);
		g2.fillRect(0, 0, s * (256 + b + b), s * (192 + b + b));
		g2.setColor(Color.BLACK);
		g2.fillRect(s * b, s * b, s * 256, s * 192);
		g2.setColor(Color.GREEN);
		for (int i = 0; i < screen.length; i++) {
			for (int j = 0; j < 8; j++) {
				int px = ((i & 31) << 3) + 7 - j;
				int py = (i >> 5);
				if (((screen[i] >> j) & 1) > 0) {
					g2.fillRect(s * (b  + px), s * (b  + py), s, s);
				}
			}
		}
		ImageIO.write(save, "PNG", new File("Splash.png"));
	}
	
	// Colour 0 = black
	// Colour 1 = grey
	// Colour 2 = white
	private void fill(byte[] screen, int xx, int yy, int w, int h, int colour) {		
		for (int x = xx; x < xx + w; x++) {
			for (int y = yy; y < yy + h; y++) {
				if ((colour == 0) || ((colour == 1) && ((x & 1) != (y & 1)))) {
					screen[(x >> 3) + (y << 5)] &= 255 - (1 << (7 - x & 7));
				} else {
					screen[(x >> 3) + (y << 5)] |= 1 << (7 - x & 7);
				}
			}
		}	
	}
	
	private static void readSplashTemplate(String template, byte[] screen) throws IOException {
		// Load the template
		File file = new File(template);
		if (!file.exists()) {
			throw new RuntimeException(file.getCanonicalPath() + " does not exist");
		}
		BufferedImage image = ImageIO.read(file);
		for (int x = 0; x < 256; x++) {
			for (int y = 0; y < 192; y++) {
				int pixel = image.getRGB(x, y) & 0xffffff;
				if (pixel != 0) {
					int b = 1 << (7 - (x & 7));
					screen[(x >> 3) + (y << 5)] |= b;
				}
			}
		}
	}
	
	public static final void main(String[] args) throws IOException {
		readSplashTemplate("../../menu/" + SPASH_TEMPLATE, new byte[256*192]);
	}
	

}
